"""
The `DateTime` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
"""
scalar DateTime

type DeleteManyPayload {
  deletedCount: Int!
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Mutation {
  deleteManyTrainingRecords(query: TrainingRecordQueryInput): DeleteManyPayload
  deleteManyTrainings(query: TrainingQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteOneTraining(query: TrainingQueryInput!): Training
  deleteOneTrainingRecord(query: TrainingRecordQueryInput!): TrainingRecord
  deleteOneUser(query: UserQueryInput!): User
  insertManyTrainingRecords(data: [TrainingRecordInsertInput!]!): InsertManyPayload
  insertManyTrainings(data: [TrainingInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertOneTraining(data: TrainingInsertInput!): Training
  insertOneTrainingRecord(data: TrainingRecordInsertInput!): TrainingRecord
  insertOneUser(data: UserInsertInput!): User
  replaceOneTraining(query: TrainingQueryInput, data: TrainingInsertInput!): Training
  replaceOneTrainingRecord(query: TrainingRecordQueryInput, data: TrainingRecordInsertInput!): TrainingRecord
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  updateManyTrainingRecords(query: TrainingRecordQueryInput, set: TrainingRecordUpdateInput!): UpdateManyPayload
  updateManyTrainings(set: TrainingUpdateInput!, query: TrainingQueryInput): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateOneTraining(query: TrainingQueryInput, set: TrainingUpdateInput!): Training
  updateOneTrainingRecord(query: TrainingRecordQueryInput, set: TrainingRecordUpdateInput!): TrainingRecord
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  upsertOneTraining(query: TrainingQueryInput, data: TrainingInsertInput!): Training
  upsertOneTrainingRecord(query: TrainingRecordQueryInput, data: TrainingRecordInsertInput!): TrainingRecord
  upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
}

scalar ObjectId

type Query {
  training(query: TrainingQueryInput): Training
  trainingRecord(query: TrainingRecordQueryInput): TrainingRecord
  trainingRecords(query: TrainingRecordQueryInput, sortBy: TrainingRecordSortByInput, limit: Int): [TrainingRecord]!
  trainings(query: TrainingQueryInput, sortBy: TrainingSortByInput, limit: Int): [Training]!
  user(query: UserQueryInput): User
  users(query: UserQueryInput, sortBy: UserSortByInput, limit: Int): [User]!
}

type Training {
  _id: ObjectId
  date: DateTime
  gym: Int
  markPrice: Int
  moneyPrice: Int
  name: String
  note: String
  records: [TrainingRecord]
  resource: Int
  time: String
  trainer: Int
  type: String
}

input TrainingInsertInput {
  gym: Int
  markPrice: Int
  date: DateTime
  type: String
  trainer: Int
  _id: ObjectId
  name: String
  resource: Int
  time: String
  note: String
  moneyPrice: Int
}

input TrainingQueryInput {
  trainer: Int
  type: String
  name: String
  resource: Int
  date: DateTime
  records: [TrainingRecordQueryInput]
  markPrice: Int
  _id: ObjectId
  gym: Int
  moneyPrice: Int
  note: String
  time: String
}

type TrainingRecord {
  _id: ObjectId
  note: String
  seasonPass: String
  status: String
  trainee: User
}

input TrainingRecordInsertInput {
  seasonPass: String
  status: String
  trainee: TrainingRecordTraineeRelationInput
  _id: ObjectId
  note: String
}

input TrainingRecordQueryInput {
  note: String
  seasonPass: String
  status: String
  trainee: UserQueryInput
  _id: ObjectId
}

enum TrainingRecordSortByInput {
  NOTE_DESC
  STATUS_ASC
  TRAINEE_ASC
  _ID_ASC
  NOTE_ASC
  SEASONPASS_DESC
  STATUS_DESC
  TRAINEE_DESC
  _ID_DESC
  SEASONPASS_ASC
}

input TrainingRecordTraineeRelationInput {
  create: UserInsertInput
  link: ObjectId
}

input TrainingRecordUpdateInput {
  _id: ObjectId
  note: String
  seasonPass: String
  status: String
  trainee: TrainingRecordTraineeRelationInput
}

enum TrainingSortByInput {
  _ID_ASC
  MONEYPRICE_ASC
  NAME_ASC
  NOTE_DESC
  RESOURCE_ASC
  TRAINER_DESC
  TYPE_ASC
  _ID_DESC
  NAME_DESC
  TIME_ASC
  TIME_DESC
  MONEYPRICE_DESC
  NOTE_ASC
  TYPE_DESC
  MARKPRICE_DESC
  RESOURCE_DESC
  DATE_ASC
  DATE_DESC
  GYM_ASC
  GYM_DESC
  MARKPRICE_ASC
  TRAINER_ASC
}

input TrainingUpdateInput {
  date: DateTime
  moneyPrice: Int
  markPrice: Int
  resource: Int
  trainer: Int
  _id: ObjectId
  name: String
  time: String
  gym: Int
  note: String
  type: String
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type User {
  _id: ObjectId
  altPhone: String
  birthday: String
  childName: String
  fullName: String
  name: String
  note: String
  phone: String
  questionaryNumber: String
  source: String
  surname: String
  type: String
}

input UserInsertInput {
  childName: String
  name: String
  source: String
  type: String
  fullName: String
  phone: String
  surname: String
  questionaryNumber: String
  altPhone: String
  birthday: String
  note: String
  _id: ObjectId
}

input UserQueryInput {
  source: String
  fullName: String
  note: String
  name: String
  altPhone: String
  childName: String
  questionaryNumber: String
  type: String
  _id: ObjectId
  surname: String
  birthday: String
  phone: String
}

enum UserSortByInput {
  BIRTHDAY_DESC
  FULLNAME_DESC
  QUESTIONARYNUMBER_DESC
  CHILDNAME_ASC
  CHILDNAME_DESC
  SURNAME_DESC
  _ID_ASC
  _ID_DESC
  BIRTHDAY_ASC
  NAME_DESC
  PHONE_ASC
  PHONE_DESC
  QUESTIONARYNUMBER_ASC
  SOURCE_DESC
  ALTPHONE_ASC
  SURNAME_ASC
  TYPE_ASC
  NAME_ASC
  NOTE_ASC
  NOTE_DESC
  TYPE_DESC
  FULLNAME_ASC
  SOURCE_ASC
  ALTPHONE_DESC
}

input UserUpdateInput {
  childName: String
  fullName: String
  phone: String
  _id: ObjectId
  birthday: String
  note: String
  source: String
  surname: String
  type: String
  altPhone: String
  name: String
  questionaryNumber: String
}
